#ifndef _AUDIO_FMT_H
#define _AUDIO_FMT_H

//==========================数学计算,与底层无关================================//


/**********************************************************************************************
 * 函数名	:conv_mono2stereo()
 * 功能	:将单声道的raw-pcm数据转换成双声道
 * 输入	:src:指向数据源缓冲区的指针
 *			 srclen:数据源缓冲区中的有效字节数
 * 输出	:target:转换结果填充的目标缓冲区指针
 * 返回值	:正值表示转换后target缓冲区中的有效字节数 负值表示出错
 **********************************************************************************************/
int conv_mono2stereo(char *src,char* target,int srclen);

/**********************************************************************************************
 * 函数名	:conv_stereo2left()
 * 功能	:将双声道的raw-pcm数据转换成单声道(左声道)
 * 输入	:src:指向数据源缓冲区的指针
 *			 srclen:数据源缓冲区中的有效字节数
 * 输出	:target:转换结果填充的目标缓冲区指针
 * 返回值	:正值表示转换后target缓冲区中的有效字节数 负值表示出错
 **********************************************************************************************/
int conv_stereo2left(char *src,char* target,int srclen);

/**********************************************************************************************
 * 函数名	:conv_stereo2right()
 * 功能	:将双声道的raw-pcm数据转换成单声道(右声道)
 * 输入	:src:指向数据源缓冲区的指针
 *			 srclen:数据源缓冲区中的有效字节数
 * 输出	:target:转换结果填充的目标缓冲区指针
 * 返回值	:正值表示转换后target缓冲区中的有效字节数 负值表示出错
 **********************************************************************************************/
int conv_stereo2right(char *src,char* target,int srclen);



/**********************************************************************************************
 * 函数名	:conv_raw2ulaw()
 * 功能	:将raw-pcm格式的数据转换为u-law的数据
 * 输入	:source:存放raw-pcm数据的源缓冲区指针
 *			 len:源缓冲区中的有效字节数
 * 输出	:target:存放转换后u-law数据的缓冲区 
 * 返回值	:正值表示成功转换后target缓冲区中的有效字节数 负值表示出错
  **********************************************************************************************/
int conv_raw2ulaw(char* target,char *source,int len);

/**********************************************************************************************
 * 函数名	:conv_ulaw2raw()
 * 功能	:将u-law格式的数据转换为raw-pcm的数据
 * 输入	:source:存放u-law数据的源缓冲区指针
 *			 len:源缓冲区中的有效字节数
 * 输出	:target:存放转换后raw-pcm数据的缓冲区 
 * 返回值	:正值表示成功转换后target缓冲区中的有效字节数 负值表示出错
  **********************************************************************************************/
int conv_ulaw2raw(char* target,char *source,int len);

#if 0
/**********************************************************************************************
 * 函数名	:conv_data()
 * 功能	:将单声道,u-law数据块转换成指定字节数的数据块
 * 输入	:source:存放u-law数据的源缓冲区指针
 *		tgtlen:目标字节数
 *		srclen:源缓冲区中的有效字节数		
 * 输出	:target:存放转换后数据的缓冲区 
 * 返回值	:正值表示成功转换后target缓冲区中的有效字节数 负值表示出错
  **********************************************************************************************/
int conv_data(char* target,char *source,int tgtlen, int srclen);


int conv_data_new(char* target,char *source,int len);
#endif

#define ALAW
#ifdef ALAW
/**********************************************************************************************
 * 函数名	:conv_raw2alaw()
 * 功能	:将raw-pcm格式的数据转换为a-law的数据
 * 输入	:source:存放raw-pcm数据的源缓冲区指针
 *			 len:源缓冲区中的有效字节数
 * 输出	:target:存放转换后a-law数据的缓冲区 
 * 返回值	:正值表示成功转换后target缓冲区中的有效字节数 负值表示出错
  **********************************************************************************************/
int conv_raw2alaw(char* target,char *source,int len);

/**********************************************************************************************
 * 函数名	:conv_alaw2raw()
 * 功能	:将a-law格式的数据转换为raw-pcm的数据
 * 输入	:source:存放a-law数据的源缓冲区指针
 *			 len:源缓冲区中的有效字节数
 * 输出	:target:存放转换后raw-pcm数据的缓冲区 
 * 返回值	:正值表示成功转换后target缓冲区中的有效字节数 负值表示出错
  **********************************************************************************************/
int conv_alaw2raw(char* target,char *source,int len);
#endif

#endif

