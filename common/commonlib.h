/*	
 *	GT1000系统中常用到的一些库函数
 *	连接参数:-lcommonlib
 *	                      	
 */

#ifndef COMMON_LIB_H
#define COMMON_LIB_H

#include <typedefine.h>
#include <time.h>
#include <gate_cmd.h>
#include <sys/types.h>
//yk del #include "file_def.h"
/*yk add*/
#define		MAX_VIDEO_IN			32			//最大视频输入数,这个数只做分配空间用,需要设备的具体值时调用get_video_num()
/**********************************************************************************************
 * 函数名	:check_file()
 * 功能	:检查文件是否存在，
 * 参数	:file:要判断的文件名 
 * 返回值	:如果存在则返回1否则返回0
 **********************************************************************************************/
int check_file(char *file);

/**************************************************************************
  *函数名       :get_file_lines
  *功能 :获取指定文件名的行数
  *参数 : FileName:要统计行数的文件名
  *返回值       :正值表示文件的行数，负值表示出错
  *注:应用程序名中不能有"grep"字样，否则结果会不正确
  *************************************************************************/
int get_file_lines(char *FileName);

/**************************************************************************
  *函数名       :get_ps_threadnum
  *功能 :获取指定进程的线程数
  *参数 : psName:要统计的进程名 FileName:目标文件
  *返回值       :正值表示线程数，负值表示出错,0表示没有此进程
  *注:应用程序名中不能有"grep"字样，否则结果会不正确
  *************************************************************************/
int get_ps_threadnum(char *psName,char *FileName);

/**********************************************************************************************
 * 函数名	:get_disk_total()
 * 功能	:获取指定连接路径的磁盘容量
 * 参数	:mountpath:已经连接的文件系统路径
 * 返回值	:文件系统的总容量，以M为单位,负值表示出错
 **********************************************************************************************/
long get_disk_total(char *mountpath);

/**********************************************************************************************
 * 函数名	:get_disk_free()
 * 功能	:获取指定连接路径的磁盘剩余空间
 * 参数	:mountpath:已经连接的文件系统路径
 * 返回值	:文件系统的剩余空间，以M为单位,负值表示出错
 **********************************************************************************************/
long get_disk_free(char *mountpath);


/**********************************************************************************************
 * 函数名	:close_all_res()
 * 功能	:关闭所有已经打开的文件描述符(除了0,1,2)
 * 参数	:无
 * 返回值	:无
 **********************************************************************************************/
void close_all_res(void);

/**********************************************************************************************
 * 函数名	:CloseAllResExc()
 * 功能	:关闭所有已经打开的文件描述符(除了指定的描述符以外)
 * 参数	:Fd:不关闭的描述符
 * 返回值	:无
 **********************************************************************************************/
void CloseAllResExc(int Fd);

/**********************************************************************************************
 * 函数名	:deamon_init()
 * 功能	:将进程设置为守护进程
 * 参数	:无
 * 返回值	:0表示成功,负值表示失败
 **********************************************************************************************/
int deamon_init(void);

/**********************************************************************************************
 * 函数名	:create_and_lockfile()
 * 功能	:创建锁文件并将其加锁
 * 参数	:lockfile:要加锁的文件名
 * 返回值	:正值表示打开的文件描述符,负值表示出错
 * 本函数一般用于判断是否有某进程的副本正在运行
 **********************************************************************************************/
int create_and_lockfile(char *lockfile);

/**********************************************************************************************
 * 函数名	:create_lockfile_save_version()
 * 功能	:创建锁文件并将其加锁,返回打开的文件描述符,按照格式存放版本号信息
 * 参数	:lockfile:要加锁的文件名,
 *			 version:进程版本号字符串
 * 返回值	:正值表示打开的文件描述符,负值表示出错
 * 本函数一般用于判断是否有某进程的副本正在运行
 * 文件格式:
 *第一行:进程号
 *第二行:version:进程版本号
 **********************************************************************************************/
int create_lockfile_save_version(char *lockfile,char *version);

/**********************************************************************************************
 * 函数名	:write_process_info()
 * 功能	:将进程的版本号信息以系统统一的格式写入到一个打开的文件中
 * 参数	:fd:被写入的文件描述符
 *			 version:字符串表示的版本信息
 * 返回值	:0表示成功负值表示出错
 **********************************************************************************************/
int write_process_info(int fd,char *version);

/* ********************************************************************************************
 * 函数名: fd_write_buf()
 * 功能:  将缓冲区的数据全部写入一个文件描述符描述的对象中
 * 返回值:
 * 	  正值表示成功写入的字节数
 * 	  负值代表发送异常,错误码待定
 * 参数:
 * 	  fd:目标文件描述符
 * 	  *buf:指向要发送的缓冲区的指针
 * 	  len:要发送的缓冲区中的有效信息字节数
 *********************************************************************************************/
int fd_write_buf(int fd,void *buf,int len);

/* ********************************************************************************************
 * 函数名: fd_read_buf()
 * 功能:  从指定的文件描述符描述的对象中读取数据到缓冲区中
 * 返回值:
 * 	  正值表示成功读取的字节数
 * 	  负值代表读取异常,错误码待定
 * 参数:
 * 	  fd:目标文件描述符
 * 	  *buf:指向存放接收数据的缓冲区的指针
 * 	  len:希望接收多少数据
 *********************************************************************************************/
int fd_read_buf(int fd,void *buf,int len);


/* 网络设置函数************************************************************************/
#if 0
/** 
 *   @brief     在指定的地址和端口上创建tcp服务socket
 *   @param  svr_addr 用于侦听的地址 INADDR_ANY表示在所有地址侦听
 *   @param  port   侦听的端口号
 *   @return   正值表示创建的socket描述符,负值表示失败
 */ 
#include <netinet/in.h>
int create_tcp_listen_port(unsigned long svr_addr,int port);

/**********************************************************************************************
 * 函数名	:net_set_nodelay()
 * 功能	:将已连接的tcp设置为禁用nagle算法(不积累数据包)
 * 参数	:fd:已经打开的tcp连接描述符
 * 返回值	:0表示成功,负值表示失败
 **********************************************************************************************/
int net_set_nodelay(int fd);

/**********************************************************************************************
 * 函数名	:net_set_recv_timeout()
 * 功能	:设置网络连接接收数据的超时时间(阻塞方式下)
 * 参数	:fd:已经打开的tcp连接描述符
 *			second:接收超时时间
 * 返回值	:0表示成功,负值表示失败
 **********************************************************************************************/
int net_set_recv_timeout(int fd,int second);

/**********************************************************************************************
 * 函数名	:net_set_snd_timeout()
 * 功能	:设置网络连接发送数据的超时时间(阻塞方式下)
 * 参数	:fd:已经打开的tcp连接描述符
 *			second:发送超时时间
 * 返回值	:0表示成功,负值表示失败
 **********************************************************************************************/
int net_set_snd_timeout(int fd,int second);

/**********************************************************************************************
 * 函数名	:net_set_linger()
 * 功能	:设置网络连接的linger属性,即调用close关闭socket前是否将没有发送完
 *			的数据先发送出去再close
 * 参数	:fd:已经打开的tcp连接描述符,
 *			 en:0表示不使用linger
 *			      1表示使用linger
 * 返回值	:0表示成功,负值表示失败
 **********************************************************************************************/
int net_set_linger(int fd,int en);

/**********************************************************************************************
 * 函数名	:net_set_block()
 * 功能	:设置网络连接的阻塞模式
 * 参数	:fd:已经打开的tcp连接描述符,
 *			 en:0表示使用阻塞模式
 *			      1表示使用l非阻塞模式
 * 返回值	:0表示成功,负值表示失败
 **********************************************************************************************/
int net_set_noblock(int fd,int en);

/**********************************************************************************************
 * 函数名	:net_activate_keepalive()
 * 功能	:将已连接的tcp设置为进行断线探测
 * 参数	:fd:已经打开的tcp连接描述符
 * 返回值	:0表示成功,负值表示失败
 **********************************************************************************************/
int	net_activate_keepalive(int fd);

/**********************************************************************************************
 * 函数名	:net_activate_reuseaddr()
 * 功能	:将服务socket设置为可重用方式,防止服务退出第二次启动时不正常
 * 参数	:fd:服务socket
 * 返回值	:0表示成功,负值表示失败
 **********************************************************************************************/
int net_activate_reuseaddr(int fd);

/**********************************************************************************************
 * 函数名	:get_fd_in_buffer_num()
 * 功能	:获取接收缓冲区中的有效字节数
 * 参数	:fd:已经连接的socket描述符
 * 返回值	:正值表示缓冲区中的有效字节数,负值表示出错
 **********************************************************************************************/
int get_fd_in_buffer_num(int fd);

/**********************************************************************************************
 * 函数名	:get_fd_out_buffer_num()
 * 功能	:获取发送缓冲区中还没有发送出去的数据字节数
 * 参数	:fd:已经连接的socket描述符
 * 返回值	:正值表示缓冲区中的未发送字节数,负值表示出错
 **********************************************************************************************/
int	get_fd_out_buffer_num(int fd);

/**********************************************************************************************
 * 函数名	:net_set_tcp_sendbuf_len()
 * 功能	:设置tcp发送缓冲区的长度
 * 参数	:fd:已经连接的socket描述符
 *			 size:要设置的长度
 * 返回值	:0表示成功负值表示出错
 **********************************************************************************************/
int net_set_tcp_sendbuf_len(int fd,int size);

/**********************************************************************************************
 * 函数名	:net_get_tcp_sendbuf_len()
 * 功能	:获取tcp发送缓冲区的长度
 * 参数	:fd:已经连接的socket描述符
 * 返回值	:正值表示发送缓冲区的长度负值表示出错
 **********************************************************************************************/
int net_get_tcp_sendbuf_len(int fd);

/**********************************************************************************************
 * 函数名	:net_set_tcp_recvbuf_len()
 * 功能	:设置tcp接收缓冲区的长度
 * 参数	:fd:已经连接的socket描述符
 *			 size:要设置的长度
 * 返回值	:0表示成功负值表示出错
 **********************************************************************************************/
int net_set_tcp_recvbuf_len(int fd,int size);

/**********************************************************************************************
 * 函数名	:net_get_tcp_sendbuf_len()
 * 功能	:获取tcp接收缓冲区的长度
 * 参数	:fd:已经连接的socket描述符
 * 返回值	:正值表示接收缓冲区的长度负值表示出错
 **********************************************************************************************/
int net_get_tcp_recvbuf_len(int fd);

/**********************************************************************************************
 * 函数名	:net_set_sock_send_low()
 * 功能	:设置tcp发送缓冲区下限(select会用到)
 * 参数	:fd:已经连接的socket描述符
 *			 size:要设置的长度
 * 返回值	:0表示成功负值表示出错
 **********************************************************************************************/
int	net_set_sock_send_low(int fd,int size);

/**********************************************************************************************
 * 函数名	:net_get_sock_send_low()
 * 功能	:获取tcp发送缓冲区下限(select会用到)
 * 参数	:fd:已经连接的socket描述符
 * 返回值	:正值表示发送缓冲区的下限,负值表示失败
 **********************************************************************************************/
int	net_get_sock_send_low(int fd);

/**********************************************************************************************
 * 函数名	:net_set_sock_recv_low()
 * 功能	:设置tcp接收缓冲区下限(select会用到)
 * 参数	:fd:已经连接的socket描述符
 *			 size:要设置的长度
 * 返回值	:0表示成功负值表示出错
 **********************************************************************************************/
int	net_set_sock_recv_low(int fd,int size);

/**********************************************************************************************
 * 函数名	:net_get_sock_recv_low()
 * 功能	:获取tcp接收缓冲区下限(select会用到)
 * 参数	:fd:已经连接的socket描述符
 * 返回值	:正值表示接收缓冲区的下限负值表示出错
 **********************************************************************************************/
int	net_get_sock_recv_low(int fd);

/**********************************************************************************************
 * 函数名	:GetPeerIpStr()
 * 功能	:获取远程tcp连接的地址
 * 参数	:fd:已经连接的socket描述符
 * 返回值	:远程连接地址字符串 NULL表示失败,错误码存于errno
 **********************************************************************************************/
char *GetPeerIpStr(int Fd);

/**********************************************************************************************
 * 函数名	:connect_timeout()
 * 功能	:带超时参数的connect,除了timeout参数以外其它参数和connect完全一样
 * 参数	:fd:已经创建好的socket
 *			 serv_addr:要连接的地址及端口号
 *			addrlen:serv_addr结构的长度
 *			timeout:超时返回时间(秒)
 * 返回值	:0表示成功，负值表示失败
 **********************************************************************************************/
int  connect_timeout(int  fd,  const  struct sockaddr *serv_addr, socklen_t    addrlen,int timeout);

/**********************************************************************************************
 * 函数名	:tcp_connect_addr()
 * 功能	:连接远程tcp服务地址
 * 参数	:addr_str:描述远程服务地址的字符串
 *			 port:远程tcp服务的端口号
 *			 timeout:tcp连接的超时时间(秒)
 * 返回值	:正值表示已连接好的描述符，负值表示出错
 **********************************************************************************************/
int tcp_connect_addr(const char *addr_str,int port,int timeout);
#endif
/**********************************************************************************************
 * 函数名	:GetExecName()
 * 功能	:获取本程序的可执行文件存放路径及文件名存放于ExecName
 * 参数	:ExecName:准备存放可执行文件路径的缓冲区(应该足够长如256)
 *			 BufLen;ExecName缓冲区的长度
 * 返回值	:0表示成功,负值表示失败
 **********************************************************************************************/
int GetExecName(char *ExecName,int BufLen);

/**********************************************************************************************
 * 函数名	:set_com_mode()
 * 功能	:设置串口的工作模式
 * 参数	:fd:已经打开的串口文件描述符
 *			 databits:数据位	7,8
 *			 stopbits:停止位	1,2
 *			 parity:奇偶校验位'n','o','e','s'
 * 返回值	:0表示成功,负值表示失败
 **********************************************************************************************/
int set_com_mode(int fd,int databits,int stopbits,int parity);

/**********************************************************************************************
 * 函数名	:set_com_speed()
 * 功能	:设置串口工作波特率
 * 参数	:fd:已经打开的串口描述符
 *			 speed:要设置的波特率 1200,4800,9600...
 * 返回值	:0表示成功,负值表示失败
 **********************************************************************************************/
int set_com_speed(int fd, int speed);

/**********************************************************************************************
 * 函数名	:get_prog_version()
 * 功能	:从锁文件获取指定应用程序的版本号字符串
 * 参数	:buf:准备存放版本信息字符串的缓冲区(应该足够长 如256)
 *			 lockfile:要查看的进程的锁文件路径
 * 返回值	:0表示成功,负值表示失败
 * 注		:
 *			GT1000系统中的常驻应用程序都有一个防止程序两次运行的锁文件
 *			其中包括了程序的版本号，该文件格式如下
 *			第一行:进程id号
 *			第二行:程序版本号
 **********************************************************************************************/
int get_prog_version(char *buf,char *lockfile);

/**********************************************************************************************
 * 函数名	:get_kernel_version()
 * 功能	:获取内核的版本号
 * 参数	:无
 * 返回值	:表示内核版本号的字符串 "2.4" "2.6"
 **********************************************************************************************/
char *get_kernel_version(void);

/**********************************************************************************************
 * 函数名	:lock_file()
 * 功能	:给已经打开的文件加锁
 * 参数	:fd:已经打开的文件描述符
 *			 wait:如果已经有其它进程锁住了文件是否等待1:等待 0:不等待
 * 返回值	:0表示成功,负值表示失败
 **********************************************************************************************/
int lock_file(int fd,int wait);

/**********************************************************************************************
 * 函数名	:unlock_file()
 * 功能	:给已经打开的文件解锁
 * 参数	:fd:已经打开的文件描述符
 * 返回值	:0表示成功,负值表示失败
 **********************************************************************************************/
int unlock_file(int fd);
//
/**********************************************************************************************
 * 函数名	:atohex()
 * 功能	:将字符串转换为16进制数字
 * 参数	:buffer:存放一个字符串表示的16进制数如"a1234","0x1234"
 * 返回值	:字符串描述的数字的16进制值
 **********************************************************************************************/
DWORD atohex(char *buffer);

/**********************************************************************************************
 * 函数名	:gttime2tm()
 * 功能	:将gt_time_struct(gt1000与网关通讯的时间结构)转为tm结构的函数
 * 参数	:gttime:指向gt_time_struct结构的指针
 *			:time:要输出的指向tm结构的指针
 * 返回值	:0表示成功，负值表示出错
 **********************************************************************************************/
int gttime2tm (struct gt_time_struct *gttime, struct tm *time);

/**********************************************************************************************
 * 函数名	:set_dev_time()
 * 功能	:设置设备的时间
 * 参数	:ntime:指向要设置的时间结构
 * 返回值	:0表示成功，负值表示出错
 **********************************************************************************************/
int set_dev_time(struct tm *ntime);

/**********************************************************************************************
* 函数名	:get_dev_time()
* 功能	:获取设备的时间
* 参数	:ntime:指向要获取的时间结构
* 返回值	:0表示成功，负值表示出错
**********************************************************************************************/
int get_dev_time(struct tm *ntime);


/**********************************************************************************************
 * 函数名	:get_percent()
 * 功能	:根据变量的值和范围计算出变量对应的百分比值
 * 参数	:min:变量允许的最小值
 *			 max:变量允许的最大值
 *			 val:变量值
 * 返回值	:该变量对应的百分比值
 **********************************************************************************************/
int get_percent(int min,int max,int val);

/**********************************************************************************************
 * 函数名	:get_percent()
 * 功能	:根据变量的范围和百分比计算出变量的值
 * 参数	:min:变量允许的最小值
 *			 max:变量允许的最大值
 *			 percent:变量的百分比值
 * 返回值	:该变量的实际值
 **********************************************************************************************/
int get_value(int min,int max,int percent);
////added by lsk 2006 -11-7
/**********************************************************************************************
 * 函数名	:force_lockfile()
 * 功能	:强制加锁文件
 * 参数 ：fd 文件控制字 
 *	  cmd 命令
 *	  wait 等待标志
 *	 cmd = F_RDLCK 读禁止 ； F_WRLCK 写禁止; F_UNLCK 解除锁定
 *	 wait = 0 无法锁定则立即返回， =1 等待锁定
 * 返回值	:0 成功 -1 失败
 **********************************************************************************************/
//强制加锁文件  
//输入 fd 文件控制字 ,cmd 命令, wait 等待标志
//返回0 成功 -1 失败
// cmd = F_RDLCK 读禁止 ； F_WRLCK 写禁止; F_UNLCK 解除锁定
// wait = 0 无法锁定则立即返回， =1 等待锁定
int force_lockfile(int fd, short int cmd, int wait);

//------add by wsy---------//

#ifndef _WIN32
typedef struct 
{
	unsigned long old_value;
	unsigned long old_result;
	int valid_stable_time[MAX_VIDEO_IN];//各个视频输入相应状态的保持稳定为1的次数
	int invalid_stable_time[MAX_VIDEO_IN];//各个视频输入相应状态的保持稳定为0的次数
}vstate_t; //用于记录各种视频状态的之前值,稳定时间等的结构

/**********************************************************************************************
 * 函数名	:delay_on_vstate() //wsy
 * 说明 :主要供视频状态使用
 * 功能	:对输入的原始状态，根据之前的值，相应的保持参数等进行处理
 *		 达到的效果是:
 *			当某位状态从0变成1时，维持valid_delay秒数才让输出也变成1
 *		 	当某位状态从1变成0时，维持invalid_delay秒数才让输出也变成0
 * 参数	:	newstate:最新的状态,按位排列
 *			 valid_delay:见以上说明
 *			 invalid_delay: 见上
 *			 stateparam: 用于保存之前各种状态和计数器的结构
 * 返回值	:处理之后输出的状态，也按位排列
 **********************************************************************************************/


unsigned long delay_on_vstate(unsigned long newstate, int valid_delay, int invalid_delay, vstate_t *stateparam);
#endif
/**********************************************************************************************
 * 函数名	:show_time
 * 功能	:	打印当前时间
 * 参数	:	infostr:要显示在时间之后的调试信息字符串,可以为空
 * 返回值	:0表示成功,负值表示错误
 **********************************************************************************************/

int show_time(char *infostr);




/**********************************************************************************************
 * 函数名	:print_buffer()
 * 功能	:将缓冲区信息打印出来
 * 输入	:buf:要打印的缓冲区指针
 *			 len:要打印的长度
 * 输出	:终端显示
 * 返回值	:无
 **********************************************************************************************/
#ifdef _WIN32
static  void print_buffer(unsigned char *buf,int len)
#else
static __inline__ void print_buffer(unsigned char *buf, int len)
#endif
{
    int i;
    for(i=0;i<len;i++)
	printf("%02x,",buf[i]);
    return ;
}
#endif
