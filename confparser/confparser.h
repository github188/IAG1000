/*
 * conf文件解析器
 *
 */
/**
   @file    confparser.c
   @author  shixin
*/
/*--------------------------------------------------------------------------*/
#ifndef _CONFPARSER_H
#define _CONFPARSER_H
#define CONF_MAXLINE     200 		//最大支持的conf文件行数
#define MAX_CHAR_LINE	 256 	//每行最大的字符数
typedef struct _confdict_ {		//conf文件解析库用到的内部数据结构
	int lines;						//共有多少行数据
       char filebuf[CONF_MAXLINE][MAX_CHAR_LINE];	//缓冲区
} confdict;

 /**********************************************************************************************
 * 函数名	:confparser_load_lockfile()
 * 功能		:调出conf文件到数据结构并且锁住文件,返回时lockf填充的是文件指针
 * 输入		:confname:要被打开的conf文件名
 * 返回值	:返回描述conf结构的指针，以后用该指针来访问文件中的变量，
 *				NULL表示出错
 **********************************************************************************************/
confdict * confparser_load_lockfile(char * confname,int wait,FILE**lockf);

 /**********************************************************************************************
 * 函数名	:confparser_load()
 * 功能	:从conf文件中获取数据结构，返回指向数据结构的指针
 * 输入	:confname:要被打开的conf文件名
 * 返回值	:返回描述conf结构的指针，以后用该指针来访问文件中的变量，
 *				NULL表示出错,
 **********************************************************************************************/
confdict * confparser_load(char * confname);

/**********************************************************************************************
 * 函数名	:confparser_freedict()
 * 功能	:释放已经用过且不再使用的conf数据结构
 * 输入	:dict:之前用confparser_load返回的指针
 * 输出	:无
 * 返回值	:无
 **********************************************************************************************/
void confparser_freedict(confdict *dict);

/**********************************************************************************************
 * 函数名	:confparser_getstring()
 * 功能	:从数据结构中获取一个指定名字的变量（字符串形式），如果没有该变量则返回def
 * 输入	:dict:之前用confparser_load返回的指针
 *			:key:变量名
 *			 def:默认值
 * 输出	:无
 * 返回值	:变量值字符串
 **********************************************************************************************/
char * confparser_getstring(confdict *dict,char * key, char * def);

 /**********************************************************************************************
 * 函数名	:confparser_setstr()
 * 功能	:将一个字符串数据的值设置到conf结构中的指定变量中
 * 输入	:dict:之前用confparser_load返回的指针
 *			:key:变量名
 *			 val:要设置的字符串指针
 * 输出	:无
 * 返回值	:0表示成功负值表示失败
 **********************************************************************************************/
int confparser_setstr(confdict *dict, char * key, char * val);

 /**********************************************************************************************
 * 函数名	:confparser_getint()
 * 功能	:从数据结构中获取一个整形的变量值，如果没有找到则返回notfound
 * 输入	:dict:之前用confparser_load返回的指针
 *			:key:变量名
 *			 notfound:默认值
 * 输出	:无
 * 返回值	:变量的值
 **********************************************************************************************/
int confparser_getint(confdict *dict, char * key, int notfound);

  /**********************************************************************************************
 * 函数名	:confparser_dump_conf()
 * 功能		:将数据结构输出到一个打开的文件流
 * 输入	:	name:文件的名称
 			dict:之前用confparser_load返回的指针
 *			 f:已经打开的文件流
 * 输出	:无
 * 返回值	:无
 **********************************************************************************************/
void confparser_dump_conf(char *name,confdict* dict, FILE * f);
#endif
