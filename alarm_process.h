#ifndef ALARM_PROCESS_H
#define ALARM_PROCESS_H

#include "mod_socket.h"
/**********************************************************************************************
 * 函数名	:is_alarm_interval()
 * 功能	:  决定当前时间是否在指定类型和编号的端子/移动侦测报警时间段内
 * 输入	:	type: 1表示端子触发，2表示移动侦测
 			number: 端子触发和移动侦测的编号
 * 返回值	:1表示在，0表示不在，负值表示错误
 **********************************************************************************************/
int is_alarm_interval(int type, int number);


/**********************************************************************************************
 * 函数名	:process_trigin_event()
 * 功能	:处理外部端子触发报警联动事件
 * 输入	:trig:按位表示的端子触发状态，１表示有触发０表示没有
 *		 oldtrig: 上次的触发状态，用于判断是否是新增触发
 *		 timep: 发生触发的时间,time_t变量
 * 返回值	:０表示成功，负值表示出错，应该总是返回０
 **********************************************************************************************/
int process_trigin_event(DWORD trig, DWORD oldtrig, time_t timep);

/**********************************************************************************************
 * 函数名	:take_alarm_action()
 * 功能	:按照事件代码执行具体的动作
 * 输入	:event:联动事件编号
 * 返回值	:０表示成功，负值表示出错
 **********************************************************************************************/
int take_alarm_action(int alarm_chn,int event);

/**********************************************************************************************
 * 函数名	:get_alarm_event()
 * 功能	:获取报警联动事件
 * 输入	:ch:触发通道号0~(TOTAL_TRIG_IN-1)表示端子触发　TOTAL_TRIG_IN~(TOTAL_TRIG_IN+3)表示移动触发
 *			 type:联动事件类型
 *				 0:立即执行事件　1:确认执行事件　2:复位执行事件
 * 返回值	:参数描述的联动事件编号
 **********************************************************************************************/
int get_alarm_event(int ch, int type, int event) ;


#endif
